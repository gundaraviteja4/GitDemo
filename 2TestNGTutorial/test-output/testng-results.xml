<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="3" total="19" passed="15">
  <reporter-output>
  </reporter-output>
  <suite name="Vehicle" duration-ms="90" started-at="2019-08-22T14:00:31Z" finished-at="2019-08-22T14:00:32Z">
    <groups>
      <group name="Smoke">
        <method signature="Test1.Car3()[pri:0, instance:testPackage.Test1@3532ec19]" name="Car3" class="testPackage.Test1"/>
        <method signature="Test2.Bike1()[pri:0, instance:testPackage.Test2@26653222]" name="Bike1" class="testPackage.Test2"/>
        <method signature="Test3.Train2()[pri:0, instance:testPackage.Test3@68c4039c]" name="Train2" class="testPackage.Test3"/>
        <method signature="Test4.CarLogin()[pri:0, instance:testPackage.Test4@548e7350]" name="CarLogin" class="testPackage.Test4"/>
      </group> <!-- Smoke -->
    </groups>
    <test name="VehicleTest" duration-ms="50" started-at="2019-08-22T14:00:31Z" finished-at="2019-08-22T14:00:32Z">
      <class name="testPackage.Test1">
        <test-method status="PASS" signature="BeforeTest()[pri:0, instance:testPackage.Test1@3532ec19]" name="BeforeTest" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeTest -->
        <test-method status="PASS" signature="Car1()[pri:0, instance:testPackage.Test1@3532ec19]" name="Car1" duration-ms="10" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Car1 -->
        <test-method status="PASS" signature="Car3()[pri:0, instance:testPackage.Test1@3532ec19]" name="Car3" duration-ms="0" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Car3 -->
        <test-method status="PASS" signature="AfterTest()[pri:0, instance:testPackage.Test1@3532ec19]" name="AfterTest" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterTest -->
      </class> <!-- testPackage.Test1 -->
      <class name="testPackage.Test3">
        <test-method status="PASS" signature="Train1()[pri:0, instance:testPackage.Test3@68c4039c]" name="Train1" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Train1 -->
        <test-method status="PASS" signature="BeforeClass()[pri:0, instance:testPackage.Test3@68c4039c]" name="BeforeClass" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeClass -->
        <test-method status="PASS" signature="Train3()[pri:0, instance:testPackage.Test3@68c4039c]" name="Train3" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Train3 -->
        <test-method status="PASS" signature="AfterClass()[pri:0, instance:testPackage.Test3@68c4039c]" name="AfterClass" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterClass -->
        <test-method status="PASS" signature="Train2()[pri:0, instance:testPackage.Test3@68c4039c]" name="Train2" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Train2 -->
      </class> <!-- testPackage.Test3 -->
      <class name="testPackage.Test2">
        <test-method status="PASS" signature="Bike2()[pri:0, instance:testPackage.Test2@26653222]" name="Bike2" duration-ms="0" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bike2 -->
        <test-method status="PASS" signature="Bike3()[pri:0, instance:testPackage.Test2@26653222]" name="Bike3" duration-ms="0" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bike3 -->
        <test-method status="PASS" signature="Bike1()[pri:0, instance:testPackage.Test2@26653222]" name="Bike1" duration-ms="0" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Bike1 -->
      </class> <!-- testPackage.Test2 -->
      <class name="testPackage.Test5">
        <test-method status="FAIL" signature="ParameterExample1(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test5@ae45eb6]" name="ParameterExample1" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[uname1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pwd1]]>
              </value>
            </param>
          </params>
          <exception class="java.io.FileNotFoundException">
            <message>
              <![CDATA[C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.io.FileNotFoundException: C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at testPackage.Test6.FetchFromPropertiesFile(Test6.java:32)
	at testPackage.Test5.ParameterExample1(Test5.java:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.io.FileNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample1 -->
        <test-method status="FAIL" signature="FetchFromPropertiesFile()[pri:0, instance:testPackage.Test5@ae45eb6]" name="FetchFromPropertiesFile" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <exception class="java.io.FileNotFoundException">
            <message>
              <![CDATA[C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.io.FileNotFoundException: C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at testPackage.Test6.FetchFromPropertiesFile(Test6.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.io.FileNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FetchFromPropertiesFile -->
        <test-method status="PASS" signature="ParameterExample3(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test5@ae45eb6]" name="ParameterExample3" duration-ms="0" started-at="2019-08-22T19:30:32Z" data-provider="GetData" finished-at="2019-08-22T19:30:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[test5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample3 -->
        <test-method status="PASS" signature="ParameterExample3(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test5@ae45eb6]" name="ParameterExample3" duration-ms="0" started-at="2019-08-22T19:30:32Z" data-provider="GetData" finished-at="2019-08-22T19:30:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[test1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample3 -->
        <test-method status="PASS" signature="ParameterExample3(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test5@ae45eb6]" name="ParameterExample3" duration-ms="0" started-at="2019-08-22T19:30:32Z" data-provider="GetData" finished-at="2019-08-22T19:30:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[test3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample3 -->
        <test-method status="SKIP" signature="ParameterExample2(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test5@ae45eb6]" name="ParameterExample2" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <exception class="org.testng.TestNGException">
            <message>
              <![CDATA[
Parameter 'Username1' is required by @Test on method ParameterExample2 but has not been marked @Optional or defined
in C:\Users\gundar\workspace\2TestNGTutorial\testng_4_Parameterisation.xml]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.TestNGException: 
Parameter 'Username1' is required by @Test on method ParameterExample2 but has not been marked @Optional or defined
in C:\Users\gundar\workspace\2TestNGTutorial\testng_4_Parameterisation.xml
	at org.testng.internal.Parameters.createParameters(Parameters.java:154)
	at org.testng.internal.Parameters.createParameters(Parameters.java:361)
	at org.testng.internal.Parameters.handleParameters(Parameters.java:451)
	at org.testng.internal.Invoker.handleParameters(Invoker.java:1270)
	at org.testng.internal.Invoker.createParameters(Invoker.java:985)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1075)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.TestNGException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample2 -->
      </class> <!-- testPackage.Test5 -->
    </test> <!-- VehicleTest -->
    <test name="LoginTest" duration-ms="20" started-at="2019-08-22T14:00:32Z" finished-at="2019-08-22T14:00:32Z">
      <class name="testPackage.Test2">
        <test-method status="PASS" signature="BeforeSuite()[pri:0, instance:testPackage.Test2@26653222]" name="BeforeSuite" is-config="true" duration-ms="10" started-at="2019-08-22T19:30:31Z" finished-at="2019-08-22T19:30:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeSuite -->
        <test-method status="PASS" signature="AfterSuite()[pri:0, instance:testPackage.Test2@26653222]" name="AfterSuite" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterSuite -->
      </class> <!-- testPackage.Test2 -->
      <class name="testPackage.Test4">
        <test-method status="PASS" signature="BeforeMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="BeforeMethod" is-config="true" duration-ms="10" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="TrainLogin()[pri:0, instance:testPackage.Test4@548e7350]" name="TrainLogin" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TrainLogin -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="AfterMethod" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BeforeMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="AfterMethod" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method status="PASS" signature="BikeLogin()[pri:0, instance:testPackage.Test4@548e7350]" name="BikeLogin" duration-ms="0" started-at="2019-08-22T19:30:32Z" depends-on-methods="testPackage.Test4.TrainLogin" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BikeLogin -->
        <test-method status="PASS" signature="BeforeMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="BeforeMethod" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMethod -->
        <test-method status="PASS" signature="CarLogin()[pri:0, instance:testPackage.Test4@548e7350]" name="CarLogin" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CarLogin -->
        <test-method status="PASS" signature="AfterMethod()[pri:0, instance:testPackage.Test4@548e7350]" name="AfterMethod" is-config="true" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
      </class> <!-- testPackage.Test4 -->
      <class name="testPackage.Test6">
        <test-method status="FAIL" signature="FetchFromPropertiesFile()[pri:0, instance:testPackage.Test6@4667ae56]" name="FetchFromPropertiesFile" duration-ms="0" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <exception class="java.io.FileNotFoundException">
            <message>
              <![CDATA[C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.io.FileNotFoundException: C:\Users\gundar\workspace\TestNGTutorial\src\testPackage\GlobalProperties.properties (The system cannot find the path specified)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at java.io.FileInputStream.<init>(FileInputStream.java:93)
	at testPackage.Test6.FetchFromPropertiesFile(Test6.java:32)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:132)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:230)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:76)
]]>
            </full-stacktrace>
          </exception> <!-- java.io.FileNotFoundException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FetchFromPropertiesFile -->
        <test-method status="PASS" signature="ParameterExample2(java.lang.String, java.lang.String)[pri:0, instance:testPackage.Test6@4667ae56]" name="ParameterExample2" duration-ms="10" started-at="2019-08-22T19:30:32Z" finished-at="2019-08-22T19:30:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[uname2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[pwd2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ParameterExample2 -->
      </class> <!-- testPackage.Test6 -->
    </test> <!-- LoginTest -->
  </suite> <!-- Vehicle -->
</testng-results>
